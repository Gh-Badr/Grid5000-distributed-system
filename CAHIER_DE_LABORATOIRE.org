#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: CAHIER_DE_LABORATOIRE
#+DATE: <2023-12-18>
#+AUTHOR: GHAZAOUI Badr, MAROUANE Kamal, RIMAOUI Nabila, ZARKTOUNI Ismail
#+EMAIL: 
#+LANGUAGE: fr
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.14)

Ce document note l'ensemble des informations pertinentes concernant notre projet. Il met en valeur nos d'essais, nos erreurs et nos tatonnements, répartis sur l'ensemble de la durée de mise en place du projet.

* Conception du code
** Communication RMI de base
- *SHA git:* =39fea68a79d1b32a9365b9e8d7e40c11e61aa24d=
- *Date:* Nov 19, 2023
- *Machines utilisées:* Réservation de 5 machines (par defaut) sur un seul site (choisi lors de l"execution du script)
- *Script:*
  - Configuration SSH nécessaires : 
    1. Avoir un compte Grid5000 actif, avec une paire de clés configurée
    2. Pour simplifier la connexion en une seule étape vers le frontend du site specifié, placer le fichier =config= dans le repertoire =~/.ssh=, avec le contenu suivant (remplacer <login> avec votre login Grid5000) :
      : Host g5k
      :   User <login>
      :   Hostname access.grid5000.fr
      :   ForwardAgent no
      : Host *.g5k
      :   User <login>
      :   ProxyCommand ssh g5k -W "$(basename %h .g5k):%p"
      :   ForwardAgent no
  - Envoi de fichiers nécessaire : Se placer dans le repertoire racine du projet et executer la commande suivante =scp -r deploy/ src/network/ <site>.g5k:=, remplacer <site> avec le nom du site souhaité (lille par exemple)
  - Se connecter au site choisi : =ssh <site>.g5k=
  - Execution du script automatisé : executer =./deploy/automate.sh=
- *Fichier resultats:* L'output du master est stocké dans le fichier =master_output.log=, et l'output de l'un des nodes est stocké dans le fichier =node_output.log=, où figure les message de communication. Ces deux fichiers sont visible depuis n'importe quel machine du site (NFS commun)

* Déployement dans Grid 5000
** Déploiement monosite
- *SHA git:* =076de53eef9b8f54f6508ffe5c810df8e7a4cc69=
- *Date:* Nov 21, 2023
- *Machines utilisées:* Voir Section 1-1
- *Script:*
  - Configuration SSH nécessaires : Voir Section 1-1
  - Envoi de fichiers nécessaire : Se placer dans le repertoire racine du projet et executer la commande suivante =scp -r deploy/ src/network/ src/scheduler/ src/parser/ src/hosts/ <site>.g5k:=, remplacer <site> avec le nom du site souhaité (lille par exemple)
  - Se connecter au site choisi : =ssh <site>.g5k=
  - Execution du script automatisé : executer =sed -i 's/\r//g' deploy/automate.sh= pour resoudre des conflits de formatage, puis =./deploy/automate.sh=
- *Fichier resultats:* Voir Section 1-1

** Déploiement inter-site
- *SHA git:* =20e13998b65d5bab2d46f39bee1b5363d4de334e=
- *Date:* Dec 13, 2023
- *Machines utilisées:* Une seule machine (par defaut) de chaque site actif de Grid5000. Celle de lille est considérée master
- *Script:*
  - Configuration SSH nécessaires : Voir Section 1-1. Annuler l'utilisation de passphrase pour la connection ssh à Grid5000, celà peut causer des problèmes
  - Execution du script automatisé : Se placer dans le repertoire racine du projet et executer la commande suivante =python API_deploy/run.py=
- *Fichier resultats:* Sur chaque machine (sur tout le site) se trouve un fichier nommé =<site>_output.log=, contenant l'output des communications réseau lors de l'execution du make distribué 
  
* Plan d'expériences

* Mesures de données brutes de la plateforme

* Modélisation et prédictions des performances de l'éxecution

* Expérimentations
  
* Fabrication des courbes de performances

